#list of people who are attending game night.
gamers=[]
#function should check that the argument passed to the `gamer` parameter has both `"name"` and a `"availability"` as keys and if so add `gamer` to `gamers_list`.
def add_gamer(gamer, gamers_list):
    if 'name' and 'availability' in gamer.keys():
        gamers_list.append(gamer)
        return gamers_list
kimberly = {'name':'Kimberly Warner', 'availability':["Monday", "Tuesday", "Friday"]}
add_gamer(kimberly,gamers)
add_gamer({'name':'Thomas Nelson','availability': ["Tuesday", "Thursday", "Saturday"]}, gamers)
add_gamer({'name':'Joyce Sellers','availability': ["Monday", "Wednesday", "Friday", "Saturday"]}, gamers)
add_gamer({'name':'Michelle Reyes','availability': ["Wednesday", "Thursday", "Sunday"]}, gamers)
add_gamer({'name':'Stephen Adams','availability': ["Thursday", "Saturday"]}, gamers)
add_gamer({'name': 'Joanne Lynn', 'availability': ["Monday", "Thursday"]}, gamers)
add_gamer({'name':'Latasha Bryan','availability': ["Monday", "Sunday"]}, gamers)
add_gamer({'name':'Crystal Brewer','availability': ["Thursday", "Friday", "Saturday"]}, gamers)
add_gamer({'name':'James Barnes Jr.','availability': ["Tuesday", "Wednesday", "Thursday", "Sunday"]}, gamers)
add_gamer({'name':'Michel Trujillo','availability': ["Monday", "Tuesday", "Wednesday"]}, gamers)
print(gamers)
def build_daily_frequency_table():
    return {'Sunday': 0,
           'Monday': 0,
           'Tuesday': 0,
           'Wednesday': 0,
           'Thursday': 0,
           'Friday': 0,
           'Saturday':0}
count_availability = build_daily_frequency_table()

#iterate through each gamer in gamers_list and iterate through each day in the gamer's availability. For each day in the gamer's availability, add one to that date on the frequency table.
def calculate_availability(gamers_list,available_frequency):
    for gamer in gamers_list:
        for day in gamer['availability']:
            available_frequency[day] += 1



calculate_availability(gamers, count_availability)
print(count_availability)


def find_best_night(availability_table):
    max_key = max(availability_table, key=availability_table.get)
    return max_key

game_night = find_best_night(count_availability)
print(game_night)

#list of all of the people who are available that night.
def available_on_night(gamers_list, day):
    #using list compherension and shit
    return [gamer for gamer in gamers_list if day in gamer['availability']]
    #using loop and blah blah
    #for gamer in gamers_list:
     #   if day in gamer['availability'] :
            #return (gamer['name'])

attending_game_night=(available_on_night(gamers, game_night))
print(attending_game_night)

# Generating an E-mail for the Participants

form_email = """
Dear {name},

The Fuckers Society is happy to host "{game}" night and wishes you will attend. Come by on {day_of_week} and have a blast!

Magically Yours,
the Fuckers Society
"""
def send_email(gamers_who_can_attend, day, game):
    for gamer in gamers_who_can_attend:
        #print(from_email.format(name=gamers['name'], day_of_week=day,game=game))
        print(form_email.format(name=gamer['name'], day_of_week=day, game=game))

print(game_night)
print('*********')
print(attending_game_night)
send_email(attending_game_night, game_night, "Abruptly Goblins!")



unable_to_attend_best_night= []
for gamer in gamers:
    if gamer not in attending_game_night:
        unable_to_attend_best_night.append(gamer)
print(unable_to_attend_best_night)

second_night_availability=build_daily_frequency_table()
calculate_availability(unable_to_attend_best_night,second_night_availability)
second_night=find_best_night(second_night_availability)
print(second_night)

available_second_game_night=available_on_night(gamers,second_night)
print(available_second_game_night)
send_email(available_second_game_night,second_night,"Abruptly Goblins!")
